<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="~E@jCRBik$`+[K7Rpyj!" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="yYNzo`28sUX}%5-[P4Xf"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum NeoPixelColors {" line1="    //% block=red" line2="    Red = 0xFF0000," line3="    //% block=orange" line4="    Orange = 0xFFA500," line5="    //% block=yellow" line6="    Yellow = 0xFFFF00," line7="    //% block=green" line8="    Green = 0x00FF00," line9="    //% block=blue" line10="    Blue = 0x0000FF," line11="    //% block=indigo" line12="    Indigo = 0x4b0082," line13="    //% block=violet" line14="    Violet = 0x8a2be2," line15="    //% block=purple" line16="    Purple = 0xFF00FF," line17="    //% block=white" line18="    White = 0xFFFFFF," line19="    //% block=black" line20="    Black = 0x000000" line21="}" numlines="22"></mutation><next><block type="typescript_statement" id="!*N,Q+B9``xY5[rRak/a"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum NeoPixelMode {" line1="    //% block=&quot;RGB (GRB format)&quot;" line2="    RGB = 1," line3="    //% block=&quot;RGB+W&quot;" line4="    RGBW = 2," line5="    //% block=&quot;RGB (RGB format)&quot;" line6="    RGB_RGB = 3" line7="}" numlines="8"></mutation><next><block type="typescript_statement" id=",#$vK%?VU8KE:`N|[C2t"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace neopixel {" line1="    /**" line2="     * A NeoPixel strip" line3="     */" line4="    export class Strip {" line5="        buf: Buffer;" line6="        pin: DigitalPin;" line7="        // TODO: encode as bytes instead of 32bit" line8="        brightness: number;" line9="        start: number; // start offset in LED strip" line10="        _length: number; // number of LEDs" line11="        _mode: NeoPixelMode;" line12="        _matrixWidth: number; // number of leds in a matrix - if any" line13="" line14="        /**" line15="         * Shows all LEDs to a given color (range 0-255 for r, g, b)." line16="         * @param rgb RGB color of the LED" line17="         */" line18="        //% blockId=&quot;neopixel_set_strip_color&quot; block=&quot;%strip|show color %rgb=neopixel_colors&quot;" line19="        //% strip.defl=strip" line20="        //% weight=85 blockGap=8" line21="        //% parts=&quot;neopixel&quot;" line22="        showColor(rgb: number) {" line23="            rgb = rgb &gt;&gt; 0;" line24="            this.setAllRGB(rgb);" line25="            this.show();" line26="        }" line27="" line28="        /**" line29="         * Shows a rainbow pattern on all LEDs." line30="         * @param startHue the start hue value for the rainbow, eg: 1" line31="         * @param endHue the end hue value for the rainbow, eg: 360" line32="         */" line33="        //% blockId=&quot;neopixel_set_strip_rainbow&quot; block=&quot;%strip|show rainbow from %startHue|to %endHue&quot;" line34="        //% strip.defl=strip" line35="        //% weight=85 blockGap=8" line36="        //% parts=&quot;neopixel&quot;" line37="        showRainbow(startHue: number = 1, endHue: number = 360) {" line38="            if (this._length &lt;= 0) return;" line39="" line40="            startHue = startHue &gt;&gt; 0;" line41="            endHue = endHue &gt;&gt; 0;" line42="            const saturation = 100;" line43="            const luminance = 50;" line44="            const steps = this._length;" line45="            const direction = HueInterpolationDirection.Clockwise;" line46="" line47="            //hue" line48="            const h1 = startHue;" line49="            const h2 = endHue;" line50="            const hDistCW = ((h2 + 360) - h1) % 360;" line51="            const hStepCW = Math.idiv((hDistCW * 100), steps);" line52="            const hDistCCW = ((h1 + 360) - h2) % 360;" line53="            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);" line54="            let hStep: number;" line55="            if (direction === HueInterpolationDirection.Clockwise) {" line56="                hStep = hStepCW;" line57="            } else if (direction === HueInterpolationDirection.CounterClockwise) {" line58="                hStep = hStepCCW;" line59="            } else {" line60="                hStep = hDistCW &lt; hDistCCW ? hStepCW : hStepCCW;" line61="            }" line62="            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation" line63="" line64="            //sat" line65="            const s1 = saturation;" line66="            const s2 = saturation;" line67="            const sDist = s2 - s1;" line68="            const sStep = Math.idiv(sDist, steps);" line69="            const s1_100 = s1 * 100;" line70="" line71="            //lum" line72="            const l1 = luminance;" line73="            const l2 = luminance;" line74="            const lDist = l2 - l1;" line75="            const lStep = Math.idiv(lDist, steps);" line76="            const l1_100 = l1 * 100" line77="" line78="            //interpolate" line79="            if (steps === 1) {" line80="                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))" line81="            } else {" line82="                this.setPixelColor(0, hsl(startHue, saturation, luminance));" line83="                for (let i = 1; i &lt; steps - 1; i++) {" line84="                    const h = Math.idiv((h1_100 + i * hStep), 100) + 360;" line85="                    const s = Math.idiv((s1_100 + i * sStep), 100);" line86="                    const l = Math.idiv((l1_100 + i * lStep), 100);" line87="                    this.setPixelColor(i, hsl(h, s, l));" line88="                }" line89="                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));" line90="            }" line91="            this.show();" line92="        }" line93="" line94="        /**" line95="         * Displays a vertical bar graph based on the `value` and `high` value." line96="         * If `high` is 0, the chart gets adjusted automatically." line97="         * @param value current value to plot" line98="         * @param high maximum value, eg: 255" line99="         */" line100="        //% weight=84" line101="        //% blockId=neopixel_show_bar_graph block=&quot;%strip|show bar graph of %value|up to %high&quot;" line102="        //% strip.defl=strip" line103="        //% icon=&quot;\uf080&quot;" line104="        //% parts=&quot;neopixel&quot;" line105="        showBarGraph(value: number, high: number): void {" line106="            if (high &lt;= 0) {" line107="                this.clear();" line108="                this.setPixelColor(0, NeoPixelColors.Yellow);" line109="                this.show();" line110="                return;" line111="            }" line112="" line113="            value = Math.abs(value);" line114="            const n = this._length;" line115="            const n1 = n - 1;" line116="            let v = Math.idiv((value * n), high);" line117="            if (v == 0) {" line118="                this.setPixelColor(0, 0x666600);" line119="                for (let j = 1; j &lt; n; ++j)" line120="                    this.setPixelColor(j, 0);" line121="            } else {" line122="                for (let k = 0; k &lt; n; ++k) {" line123="                    if (k &lt;= v) {" line124="                        const b = Math.idiv(k * 255, n1);" line125="                        this.setPixelColor(k, neopixel.rgb(b, 0, 255 - b));" line126="                    }" line127="                    else this.setPixelColor(k, 0);" line128="                }" line129="            }" line130="            this.show();" line131="        }" line132="" line133="        /**" line134="         * Set LED to a given color (range 0-255 for r, g, b)." line135="         * You need to call ``show`` to make the changes visible." line136="         * @param pixeloffset position of the NeoPixel in the strip" line137="         * @param rgb RGB color of the LED" line138="         */" line139="        //% blockId=&quot;neopixel_set_pixel_color&quot; block=&quot;%strip|set pixel color at %pixeloffset|to %rgb=neopixel_colors&quot;" line140="        //% strip.defl=strip" line141="        //% blockGap=8" line142="        //% weight=80" line143="        //% parts=&quot;neopixel&quot; advanced=true" line144="        setPixelColor(pixeloffset: number, rgb: number): void {" line145="            this.setPixelRGB(pixeloffset &gt;&gt; 0, rgb &gt;&gt; 0);" line146="        }" line147="" line148="        /**" line149="         * Sets the number of pixels in a matrix shaped strip" line150="         * @param width number of pixels in a row" line151="         */" line152="        //% blockId=neopixel_set_matrix_width block=&quot;%strip|set matrix width %width&quot;" line153="        //% strip.defl=strip" line154="        //% blockGap=8" line155="        //% weight=5" line156="        //% parts=&quot;neopixel&quot; advanced=true" line157="        setMatrixWidth(width: number) {" line158="            this._matrixWidth = Math.min(this._length, width &gt;&gt; 0);" line159="        }" line160="" line161="        /**" line162="         * Set LED to a given color (range 0-255 for r, g, b) in a matrix shaped strip" line163="         * You need to call ``show`` to make the changes visible." line164="         * @param x horizontal position" line165="         * @param y horizontal position" line166="         * @param rgb RGB color of the LED" line167="         */" line168="        //% blockId=&quot;neopixel_set_matrix_color&quot; block=&quot;%strip|set matrix color at x %x|y %y|to %rgb=neopixel_colors&quot;" line169="        //% strip.defl=strip" line170="        //% weight=4" line171="        //% parts=&quot;neopixel&quot; advanced=true" line172="        setMatrixColor(x: number, y: number, rgb: number) {" line173="            if (this._matrixWidth &lt;= 0) return; // not a matrix, ignore" line174="            x = x &gt;&gt; 0;" line175="            y = y &gt;&gt; 0;" line176="            rgb = rgb &gt;&gt; 0;" line177="            const cols = Math.idiv(this._length, this._matrixWidth);" line178="            if (x &lt; 0 || x &gt;= this._matrixWidth || y &lt; 0 || y &gt;= cols) return;" line179="            let m = x + y * this._matrixWidth;" line180="            this.setPixelColor(m, rgb);" line181="        }" line182="" line183="        /**" line184="         * For NeoPixels with RGB+W LEDs, set the white LED brightness. This only works for RGB+W NeoPixels." line185="         * @param pixeloffset position of the LED in the strip" line186="         * @param white brightness of the white LED" line187="         */" line188="        //% blockId=&quot;neopixel_set_pixel_white&quot; block=&quot;%strip|set pixel white LED at %pixeloffset|to %white&quot;" line189="        //% strip.defl=strip" line190="        //% blockGap=8" line191="        //% weight=80" line192="        //% parts=&quot;neopixel&quot; advanced=true" line193="        setPixelWhiteLED(pixeloffset: number, white: number): void {" line194="            if (this._mode === NeoPixelMode.RGBW) {" line195="                this.setPixelW(pixeloffset &gt;&gt; 0, white &gt;&gt; 0);" line196="            }" line197="        }" line198="" line199="        /**" line200="         * Send all the changes to the strip." line201="         */" line202="        //% blockId=&quot;neopixel_show&quot; block=&quot;%strip|show&quot; blockGap=8" line203="        //% strip.defl=strip" line204="        //% weight=79" line205="        //% parts=&quot;neopixel&quot;" line206="        show() {" line207="            // only supported in beta" line208="            // ws2812b.setBufferMode(this.pin, this._mode);" line209="            ws2812b.sendBuffer(this.buf, this.pin);" line210="        }" line211="" line212="        /**" line213="         * Turn off all LEDs." line214="         * You need to call ``show`` to make the changes visible." line215="         */" line216="        //% blockId=&quot;neopixel_clear&quot; block=&quot;%strip|clear&quot;" line217="        //% strip.defl=strip" line218="        //% weight=76" line219="        //% parts=&quot;neopixel&quot;" line220="        clear(): void {" line221="            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line222="            this.buf.fill(0, this.start * stride, this._length * stride);" line223="        }" line224="" line225="        /**" line226="         * Gets the number of pixels declared on the strip" line227="         */" line228="        //% blockId=&quot;neopixel_length&quot; block=&quot;%strip|length&quot; blockGap=8" line229="        //% strip.defl=strip" line230="        //% weight=60 advanced=true" line231="        length() {" line232="            return this._length;" line233="        }" line234="" line235="        /**" line236="         * Set the brightness of the strip. This flag only applies to future operation." line237="         * @param brightness a measure of LED brightness in 0-255. eg: 255" line238="         */" line239="        //% blockId=&quot;neopixel_set_brightness&quot; block=&quot;%strip|set brightness %brightness&quot; blockGap=8" line240="        //% strip.defl=strip" line241="        //% weight=59" line242="        //% parts=&quot;neopixel&quot; advanced=true" line243="        setBrightness(brightness: number): void {" line244="            this.brightness = brightness &amp; 0xff;" line245="        }" line246="" line247="        /**" line248="         * Apply brightness to current colors using a quadratic easing function." line249="         **/" line250="        //% blockId=&quot;neopixel_each_brightness&quot; block=&quot;%strip|ease brightness&quot; blockGap=8" line251="        //% strip.defl=strip" line252="        //% weight=58" line253="        //% parts=&quot;neopixel&quot; advanced=true" line254="        easeBrightness(): void {" line255="            const stride2 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line256="            const br = this.brightness;" line257="            const buf = this.buf;" line258="            const end = this.start + this._length;" line259="            const mid = Math.idiv(this._length, 2);" line260="            for (let o = this.start; o &lt; end; ++o) {" line261="                const p = o - this.start;" line262="                const ledoffset = o * stride2;" line263="                const br2 = p &gt; mid" line264="                    ? Math.idiv(255 * (this._length - 1 - p) * (this._length - 1 - p), (mid * mid))" line265="                    : Math.idiv(255 * p * p, (mid * mid));" line266="                const r = (buf[ledoffset + 0] * br2) &gt;&gt; 8; buf[ledoffset + 0] = r;" line267="                const g = (buf[ledoffset + 1] * br2) &gt;&gt; 8; buf[ledoffset + 1] = g;" line268="                const c = (buf[ledoffset + 2] * br2) &gt;&gt; 8; buf[ledoffset + 2] = c;" line269="                if (stride2 == 4) {" line270="                    const w = (buf[ledoffset + 3] * br2) &gt;&gt; 8; buf[ledoffset + 3] = w;" line271="                }" line272="            }" line273="        }" line274="" line275="        /**" line276="         * Create a range of LEDs." line277="         * @param start offset in the LED strip to start the range" line278="         * @param length number of LEDs in the range. eg: 4" line279="         */" line280="        //% weight=89" line281="        //% blockId=&quot;neopixel_range&quot; block=&quot;%strip|range from %start|with %length|leds&quot;" line282="        //% strip.defl=strip" line283="        //% parts=&quot;neopixel&quot;" line284="        //% blockSetVariable=range" line285="        range(start: number, length: number): Strip {" line286="            start = start &gt;&gt; 0;" line287="            length = length &gt;&gt; 0;" line288="            let strip = new Strip();" line289="            strip.buf = this.buf;" line290="            strip.pin = this.pin;" line291="            strip.brightness = this.brightness;" line292="            strip.start = this.start + Math.clamp(0, this._length - 1, start);" line293="            strip._length = Math.clamp(0, this._length - (strip.start - this.start), length);" line294="            strip._matrixWidth = 0;" line295="            strip._mode = this._mode;" line296="            return strip;" line297="        }" line298="" line299="        /**" line300="         * Shift LEDs forward and clear with zeros." line301="         * You need to call ``show`` to make the changes visible." line302="         * @param offset number of pixels to shift forward, eg: 1" line303="         */" line304="        //% blockId=&quot;neopixel_shift&quot; block=&quot;%strip|shift pixels by %offset&quot; blockGap=8" line305="        //% strip.defl=strip" line306="        //% weight=40" line307="        //% parts=&quot;neopixel&quot;" line308="        shift(offset: number = 1): void {" line309="            offset = offset &gt;&gt; 0;" line310="            const stride3 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line311="            this.buf.shift(-offset * stride3, this.start * stride3, this._length * stride3)" line312="        }" line313="" line314="        /**" line315="         * Rotate LEDs forward." line316="         * You need to call ``show`` to make the changes visible." line317="         * @param offset number of pixels to rotate forward, eg: 1" line318="         */" line319="        //% blockId=&quot;neopixel_rotate&quot; block=&quot;%strip|rotate pixels by %offset&quot; blockGap=8" line320="        //% strip.defl=strip" line321="        //% weight=39" line322="        //% parts=&quot;neopixel&quot;" line323="        rotate(offset: number = 1): void {" line324="            offset = offset &gt;&gt; 0;" line325="            const stride4 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line326="            this.buf.rotate(-offset * stride4, this.start * stride4, this._length * stride4)" line327="        }" line328="" line329="        /**" line330="         * Set the pin where the neopixel is connected, defaults to P0." line331="         */" line332="        //% weight=10" line333="        //% parts=&quot;neopixel&quot; advanced=true" line334="        setPin(pin: DigitalPin): void {" line335="            this.pin = pin;" line336="            pins.digitalWritePin(this.pin, 0);" line337="            // don't yield to avoid races on initialization" line338="        }" line339="" line340="        /**" line341="         * Estimates the electrical current (mA) consumed by the current light configuration." line342="         */" line343="        //% weight=9 blockId=neopixel_power block=&quot;%strip|power (mA)&quot;" line344="        //% strip.defl=strip" line345="        //% advanced=true" line346="        power(): number {" line347="            const stride5 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line348="            const end2 = this.start + this._length;" line349="            let q = 0;" line350="            for (let t = this.start; t &lt; end2; ++t) {" line351="                const ledoffset2 = t * stride5;" line352="                for (let u = 0; u &lt; stride5; ++u) {" line353="                    q += this.buf[t + u];" line354="                }" line355="            }" line356="            return Math.idiv(this.length() * 7, 10) /* 0.7mA per neopixel */" line357="                + Math.idiv(q * 480, 10000); /* rought approximation */" line358="        }" line359="" line360="        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {" line361="            if (this._mode === NeoPixelMode.RGB_RGB) {" line362="                this.buf[offset + 0] = red;" line363="                this.buf[offset + 1] = green;" line364="            } else {" line365="                this.buf[offset + 0] = green;" line366="                this.buf[offset + 1] = red;" line367="            }" line368="            this.buf[offset + 2] = blue;" line369="        }" line370="" line371="        private setAllRGB(rgb: number) {" line372="            let red = unpackR(rgb);" line373="            let green = unpackG(rgb);" line374="            let blue = unpackB(rgb);" line375="" line376="            const br3 = this.brightness;" line377="            if (br3 &lt; 255) {" line378="                red = (red * br3) &gt;&gt; 8;" line379="                green = (green * br3) &gt;&gt; 8;" line380="                blue = (blue * br3) &gt;&gt; 8;" line381="            }" line382="            const end3 = this.start + this._length;" line383="            const stride6 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line384="            for (let a = this.start; a &lt; end3; ++a) {" line385="                this.setBufferRGB(a * stride6, red, green, blue)" line386="            }" line387="        }" line388="        private setAllW(white: number) {" line389="            if (this._mode !== NeoPixelMode.RGBW)" line390="                return;" line391="" line392="            let br4 = this.brightness;" line393="            if (br4 &lt; 255) {" line394="                white = (white * br4) &gt;&gt; 8;" line395="            }" line396="            let buf2 = this.buf;" line397="            let end4 = this.start + this._length;" line398="            for (let d = this.start; d &lt; end4; ++d) {" line399="                let ledoffset3 = d * 4;" line400="                buf2[ledoffset3 + 3] = white;" line401="            }" line402="        }" line403="        private setPixelRGB(pixeloffset: number, rgb: number): void {" line404="            if (pixeloffset &lt; 0" line405="                || pixeloffset &gt;= this._length)" line406="                return;" line407="" line408="            let stride7 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line409="            pixeloffset = (pixeloffset + this.start) * stride7;" line410="" line411="            let red2 = unpackR(rgb);" line412="            let green2 = unpackG(rgb);" line413="            let blue2 = unpackB(rgb);" line414="" line415="            let br5 = this.brightness;" line416="            if (br5 &lt; 255) {" line417="                red2 = (red2 * br5) &gt;&gt; 8;" line418="                green2 = (green2 * br5) &gt;&gt; 8;" line419="                blue2 = (blue2 * br5) &gt;&gt; 8;" line420="            }" line421="            this.setBufferRGB(pixeloffset, red2, green2, blue2)" line422="        }" line423="        private setPixelW(pixeloffset: number, white: number): void {" line424="            if (this._mode !== NeoPixelMode.RGBW)" line425="                return;" line426="" line427="            if (pixeloffset &lt; 0" line428="                || pixeloffset &gt;= this._length)" line429="                return;" line430="" line431="            pixeloffset = (pixeloffset + this.start) * 4;" line432="" line433="            let br6 = this.brightness;" line434="            if (br6 &lt; 255) {" line435="                white = (white * br6) &gt;&gt; 8;" line436="            }" line437="            let buf3 = this.buf;" line438="            buf3[pixeloffset + 3] = white;" line439="        }" line440="    }" line441="" line442="    /**" line443="     * Create a new NeoPixel driver for `numleds` LEDs." line444="     * @param pin the pin where the neopixel is connected." line445="     * @param numleds number of leds in the strip, eg: 24,30,60,64" line446="     */" line447="    //% blockId=&quot;neopixel_create&quot; block=&quot;NeoPixel at pin %pin|with %numleds|leds as %mode&quot;" line448="    //% weight=90 blockGap=8" line449="    //% parts=&quot;neopixel&quot;" line450="    //% trackArgs=0,2" line451="    //% blockSetVariable=strip" line452="    export function create(pin: DigitalPin, numleds: number, mode: NeoPixelMode): Strip {" line453="        let strip2 = new Strip();" line454="        let stride8 = mode === NeoPixelMode.RGBW ? 4 : 3;" line455="        strip2.buf = pins.createBuffer(numleds * stride8);" line456="        strip2.start = 0;" line457="        strip2._length = numleds;" line458="        strip2._mode = mode || NeoPixelMode.RGB;" line459="        strip2._matrixWidth = 0;" line460="        strip2.setBrightness(128)" line461="        strip2.setPin(pin)" line462="        return strip2;" line463="    }" line464="" line465="    /**" line466="     * Converts red, green, blue channels into a RGB color" line467="     * @param red value of the red channel between 0 and 255. eg: 255" line468="     * @param green value of the green channel between 0 and 255. eg: 255" line469="     * @param blue value of the blue channel between 0 and 255. eg: 255" line470="     */" line471="    //% weight=1" line472="    //% blockId=&quot;neopixel_rgb&quot; block=&quot;red %red|green %green|blue %blue&quot;" line473="    //% advanced=true" line474="    export function rgb(red: number, green: number, blue: number): number {" line475="        return packRGB(red, green, blue);" line476="    }" line477="" line478="    /**" line479="     * Gets the RGB value of a known color" line480="    */" line481="    //% weight=2 blockGap=8" line482="    //% blockId=&quot;neopixel_colors&quot; block=&quot;%color&quot;" line483="    //% advanced=true" line484="    export function colors(color: NeoPixelColors): number {" line485="        return color;" line486="    }" line487="" line488="    function packRGB(a: number, b: number, c: number): number {" line489="        return ((a &amp; 0xFF) &lt;&lt; 16) | ((b &amp; 0xFF) &lt;&lt; 8) | (c &amp; 0xFF);" line490="    }" line491="    function unpackR(rgb: number): number {" line492="        let e = (rgb &gt;&gt; 16) &amp; 0xFF;" line493="        return e;" line494="    }" line495="    function unpackG(rgb: number): number {" line496="        let f = (rgb &gt;&gt; 8) &amp; 0xFF;" line497="        return f;" line498="    }" line499="    function unpackB(rgb: number): number {" line500="        let b2 = (rgb) &amp; 0xFF;" line501="        return b2;" line502="    }" line503="" line504="    /**" line505="     * Converts a hue saturation luminosity value into a RGB color" line506="     * @param h hue from 0 to 360" line507="     * @param s saturation from 0 to 99" line508="     * @param l luminosity from 0 to 99" line509="     */" line510="    //% blockId=neopixelHSL block=&quot;hue %h|saturation %s|luminosity %l&quot;" line511="    export function hsl(h: number, s: number, l: number): number {" line512="        h = Math.round(h);" line513="        s = Math.round(s);" line514="        l = Math.round(l);" line515="" line516="        h = h % 360;" line517="        s = Math.clamp(0, 99, s);" line518="        l = Math.clamp(0, 99, l);" line519="        let c2 = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) &lt;&lt; 8), 10000); //chroma, [0,255]" line520="        let h12 = Math.idiv(h, 60);//[0,6]" line521="        let h22 = Math.idiv((h - h12 * 60) * 256, 60);//[0,255]" line522="        let temp = Math.abs((((h12 % 2) &lt;&lt; 8) + h22) - 256);" line523="        let x = (c2 * (256 - (temp))) &gt;&gt; 8;//[0,255], second largest component of this color" line524="        let r$: number;" line525="        let g$: number;" line526="        let b$: number;" line527="        if (h12 == 0) {" line528="            r$ = c2; g$ = x; b$ = 0;" line529="        } else if (h12 == 1) {" line530="            r$ = x; g$ = c2; b$ = 0;" line531="        } else if (h12 == 2) {" line532="            r$ = 0; g$ = c2; b$ = x;" line533="        } else if (h12 == 3) {" line534="            r$ = 0; g$ = x; b$ = c2;" line535="        } else if (h12 == 4) {" line536="            r$ = x; g$ = 0; b$ = c2;" line537="        } else if (h12 == 5) {" line538="            r$ = c2; g$ = 0; b$ = x;" line539="        }" line540="        let m2 = Math.idiv((Math.idiv((l * 2 &lt;&lt; 8), 100) - c2), 2);" line541="        let r2 = r$ + m2;" line542="        let g2 = g$ + m2;" line543="        let b3 = b$ + m2;" line544="        return packRGB(r2, g2, b3);" line545="    }" line546="" line547="    export enum HueInterpolationDirection {" line548="        Clockwise," line549="        CounterClockwise," line550="        Shortest" line551="    }" line552="}" numlines="553"></mutation></block></next></block></next></block></statement></block></xml>
<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="xc5n4]vbY~(iq(zH_+.c" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="~o02_t]gwY%o[[Tad.64"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum NeoPixelColors {" line1="    //% block=red" line2="    Red = 0xFF0000," line3="    //% block=orange" line4="    Orange = 0xFFA500," line5="    //% block=yellow" line6="    Yellow = 0xFFFF00," line7="    //% block=green" line8="    Green = 0x00FF00," line9="    //% block=blue" line10="    Blue = 0x0000FF," line11="    //% block=indigo" line12="    Indigo = 0x4b0082," line13="    //% block=violet" line14="    Violet = 0x8a2be2," line15="    //% block=purple" line16="    Purple = 0xFF00FF," line17="    //% block=white" line18="    White = 0xFFFFFF," line19="    //% block=black" line20="    Black = 0x000000" line21="}" numlines="22"></mutation><next><block type="typescript_statement" id="+UZqX-!v_sX?h5E!R}Zw"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum NeoPixelMode {" line1="    //% block=&quot;RGB (GRB format)&quot;" line2="    RGB = 1," line3="    //% block=&quot;RGB+W&quot;" line4="    RGBW = 2," line5="    //% block=&quot;RGB (RGB format)&quot;" line6="    RGB_RGB = 3" line7="}" numlines="8"></mutation><next><block type="typescript_statement" id="zXp~+5Ds.)!ZEkR1Q{=i"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace neopixelsparkoh" line1=" {" line2="    /**" line3="     * A NeoPixel strip" line4="     */" line5="    export class Strip {" line6="        buf: Buffer;" line7="        pin: DigitalPin;" line8="        // TODO: encode as bytes instead of 32bit" line9="        brightness: number;" line10="        start: number; // start offset in LED strip" line11="        _length: number; // number of LEDs" line12="        _mode: NeoPixelMode;" line13="        _matrixWidth: number; // number of leds in a matrix - if any" line14="" line15="        /**" line16="         * Shows all LEDs to a given color (range 0-255 for r, g, b)." line17="         * @param rgb RGB color of the LED" line18="         */" line19="        //% blockId=&quot;neopixel_set_strip_color&quot; block=&quot;%strip|show color %rgb=neopixel_colors&quot;" line20="        //% strip.defl=strip" line21="        //% weight=85 blockGap=8" line22="        //% parts=&quot;neopixel&quot;" line23="        showColor(rgb: number) {" line24="            rgb = rgb &gt;&gt; 0;" line25="            this.setAllRGB(rgb);" line26="            this.show();" line27="        }" line28="" line29="        /**" line30="         * Shows a rainbow pattern on all LEDs." line31="         * @param startHue the start hue value for the rainbow, eg: 1" line32="         * @param endHue the end hue value for the rainbow, eg: 360" line33="         */" line34="        //% blockId=&quot;neopixel_set_strip_rainbow&quot; block=&quot;%strip|show rainbow from %startHue|to %endHue&quot;" line35="        //% strip.defl=strip" line36="        //% weight=85 blockGap=8" line37="        //% parts=&quot;neopixel&quot;" line38="        showRainbow(startHue: number = 1, endHue: number = 360) {" line39="            if (this._length &lt;= 0) return;" line40="" line41="            startHue = startHue &gt;&gt; 0;" line42="            endHue = endHue &gt;&gt; 0;" line43="            const saturation = 100;" line44="            const luminance = 50;" line45="            const steps = this._length;" line46="            const direction = HueInterpolationDirection.Clockwise;" line47="" line48="            //hue" line49="            const h1 = startHue;" line50="            const h2 = endHue;" line51="            const hDistCW = ((h2 + 360) - h1) % 360;" line52="            const hStepCW = Math.idiv((hDistCW * 100), steps);" line53="            const hDistCCW = ((h1 + 360) - h2) % 360;" line54="            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);" line55="            let hStep: number;" line56="            if (direction === HueInterpolationDirection.Clockwise) {" line57="                hStep = hStepCW;" line58="            } else if (direction === HueInterpolationDirection.CounterClockwise) {" line59="                hStep = hStepCCW;" line60="            } else {" line61="                hStep = hDistCW &lt; hDistCCW ? hStepCW : hStepCCW;" line62="            }" line63="            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation" line64="" line65="            //sat" line66="            const s1 = saturation;" line67="            const s2 = saturation;" line68="            const sDist = s2 - s1;" line69="            const sStep = Math.idiv(sDist, steps);" line70="            const s1_100 = s1 * 100;" line71="" line72="            //lum" line73="            const l1 = luminance;" line74="            const l2 = luminance;" line75="            const lDist = l2 - l1;" line76="            const lStep = Math.idiv(lDist, steps);" line77="            const l1_100 = l1 * 100" line78="" line79="            //interpolate" line80="            if (steps === 1) {" line81="                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))" line82="            } else {" line83="                this.setPixelColor(0, hsl(startHue, saturation, luminance));" line84="                for (let i = 1; i &lt; steps - 1; i++) {" line85="                    const h = Math.idiv((h1_100 + i * hStep), 100) + 360;" line86="                    const s = Math.idiv((s1_100 + i * sStep), 100);" line87="                    const l = Math.idiv((l1_100 + i * lStep), 100);" line88="                    this.setPixelColor(i, hsl(h, s, l));" line89="                }" line90="                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));" line91="            }" line92="            this.show();" line93="        }" line94="" line95="        /**" line96="         * Displays a vertical bar graph based on the `value` and `high` value." line97="         * If `high` is 0, the chart gets adjusted automatically." line98="         * @param value current value to plot" line99="         * @param high maximum value, eg: 255" line100="         */" line101="        //% weight=84" line102="        //% blockId=neopixel_show_bar_graph block=&quot;%strip|show bar graph of %value|up to %high&quot;" line103="        //% strip.defl=strip" line104="        //% icon=&quot;\uf080&quot;" line105="        //% parts=&quot;neopixel&quot;" line106="        showBarGraph(value: number, high: number): void {" line107="            if (high &lt;= 0) {" line108="                this.clear();" line109="                this.setPixelColor(0, NeoPixelColors.Yellow);" line110="                this.show();" line111="                return;" line112="            }" line113="" line114="            value = Math.abs(value);" line115="            const n = this._length;" line116="            const n1 = n - 1;" line117="            let v = Math.idiv((value * n), high);" line118="            if (v == 0) {" line119="                this.setPixelColor(0, 0x666600);" line120="                for (let j = 1; j &lt; n; ++j)" line121="                    this.setPixelColor(j, 0);" line122="            } else {" line123="                for (let k = 0; k &lt; n; ++k) {" line124="                    if (k &lt;= v) {" line125="                        const b = Math.idiv(k * 255, n1);" line126="                        this.setPixelColor(k, neopixelsparkoh.rgb(b, 0, 255 - b));" line127="                    }" line128="                    else this.setPixelColor(k, 0);" line129="                }" line130="            }" line131="            this.show();" line132="        }" line133="" line134="        /**" line135="         * Set LED to a given color (range 0-255 for r, g, b)." line136="         * You need to call ``show`` to make the changes visible." line137="         * @param pixeloffset position of the NeoPixel in the strip" line138="         * @param rgb RGB color of the LED" line139="         */" line140="        //% blockId=&quot;neopixel_set_pixel_color&quot; block=&quot;%strip|set pixel color at %pixeloffset|to %rgb=neopixel_colors&quot;" line141="        //% strip.defl=strip" line142="        //% blockGap=8" line143="        //% weight=80" line144="        //% parts=&quot;neopixel&quot; advanced=true" line145="        setPixelColor(pixeloffset: number, rgb: number): void {" line146="            this.setPixelRGB(pixeloffset &gt;&gt; 0, rgb &gt;&gt; 0);" line147="        }" line148="" line149="        /**" line150="         * Sets the number of pixels in a matrix shaped strip" line151="         * @param width number of pixels in a row" line152="         */" line153="        //% blockId=neopixel_set_matrix_width block=&quot;%strip|set matrix width %width&quot;" line154="        //% strip.defl=strip" line155="        //% blockGap=8" line156="        //% weight=5" line157="        //% parts=&quot;neopixel&quot; advanced=true" line158="        setMatrixWidth(width: number) {" line159="            this._matrixWidth = Math.min(this._length, width &gt;&gt; 0);" line160="        }" line161="" line162="        /**" line163="         * Set LED to a given color (range 0-255 for r, g, b) in a matrix shaped strip" line164="         * You need to call ``show`` to make the changes visible." line165="         * @param x horizontal position" line166="         * @param y horizontal position" line167="         * @param rgb RGB color of the LED" line168="         */" line169="        //% blockId=&quot;neopixel_set_matrix_color&quot; block=&quot;%strip|set matrix color at x %x|y %y|to %rgb=neopixel_colors&quot;" line170="        //% strip.defl=strip" line171="        //% weight=4" line172="        //% parts=&quot;neopixel&quot; advanced=true" line173="        setMatrixColor(x: number, y: number, rgb: number) {" line174="            if (this._matrixWidth &lt;= 0) return; // not a matrix, ignore" line175="            x = x &gt;&gt; 0;" line176="            y = y &gt;&gt; 0;" line177="            rgb = rgb &gt;&gt; 0;" line178="            const cols = Math.idiv(this._length, this._matrixWidth);" line179="            if (x &lt; 0 || x &gt;= this._matrixWidth || y &lt; 0 || y &gt;= cols) return;" line180="            let m = x + y * this._matrixWidth;" line181="            this.setPixelColor(m, rgb);" line182="        }" line183="" line184="        /**" line185="         * For NeoPixels with RGB+W LEDs, set the white LED brightness. This only works for RGB+W NeoPixels." line186="         * @param pixeloffset position of the LED in the strip" line187="         * @param white brightness of the white LED" line188="         */" line189="        //% blockId=&quot;neopixel_set_pixel_white&quot; block=&quot;%strip|set pixel white LED at %pixeloffset|to %white&quot;" line190="        //% strip.defl=strip" line191="        //% blockGap=8" line192="        //% weight=80" line193="        //% parts=&quot;neopixel&quot; advanced=true" line194="        setPixelWhiteLED(pixeloffset: number, white: number): void {" line195="            if (this._mode === NeoPixelMode.RGBW) {" line196="                this.setPixelW(pixeloffset &gt;&gt; 0, white &gt;&gt; 0);" line197="            }" line198="        }" line199="" line200="        /**" line201="         * Send all the changes to the strip." line202="         */" line203="        //% blockId=&quot;neopixel_show&quot; block=&quot;%strip|show&quot; blockGap=8" line204="        //% strip.defl=strip" line205="        //% weight=79" line206="        //% parts=&quot;neopixel&quot;" line207="        show() {" line208="            // only supported in beta" line209="            // ws2812b.setBufferMode(this.pin, this._mode);" line210="            ws2812b.sendBuffer(this.buf, this.pin);" line211="        }" line212="" line213="        /**" line214="         * Turn off all LEDs." line215="         * You need to call ``show`` to make the changes visible." line216="         */" line217="        //% blockId=&quot;neopixel_clear&quot; block=&quot;%strip|clear&quot;" line218="        //% strip.defl=strip" line219="        //% weight=76" line220="        //% parts=&quot;neopixel&quot;" line221="        clear(): void {" line222="            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line223="            this.buf.fill(0, this.start * stride, this._length * stride);" line224="        }" line225="" line226="        /**" line227="         * Gets the number of pixels declared on the strip" line228="         */" line229="        //% blockId=&quot;neopixel_length&quot; block=&quot;%strip|length&quot; blockGap=8" line230="        //% strip.defl=strip" line231="        //% weight=60 advanced=true" line232="        length() {" line233="            return this._length;" line234="        }" line235="" line236="        /**" line237="         * Set the brightness of the strip. This flag only applies to future operation." line238="         * @param brightness a measure of LED brightness in 0-255. eg: 255" line239="         */" line240="        //% blockId=&quot;neopixel_set_brightness&quot; block=&quot;%strip|set brightness %brightness&quot; blockGap=8" line241="        //% strip.defl=strip" line242="        //% weight=59" line243="        //% parts=&quot;neopixel&quot; advanced=true" line244="        setBrightness(brightness: number): void {" line245="            this.brightness = brightness &amp; 0xff;" line246="        }" line247="" line248="        /**" line249="         * Apply brightness to current colors using a quadratic easing function." line250="         **/" line251="        //% blockId=&quot;neopixel_each_brightness&quot; block=&quot;%strip|ease brightness&quot; blockGap=8" line252="        //% strip.defl=strip" line253="        //% weight=58" line254="        //% parts=&quot;neopixel&quot; advanced=true" line255="        easeBrightness(): void {" line256="            const stride2 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line257="            const br = this.brightness;" line258="            const buf = this.buf;" line259="            const end = this.start + this._length;" line260="            const mid = Math.idiv(this._length, 2);" line261="            for (let o = this.start; o &lt; end; ++o) {" line262="                const p = o - this.start;" line263="                const ledoffset = o * stride2;" line264="                const br2 = p &gt; mid" line265="                    ? Math.idiv(255 * (this._length - 1 - p) * (this._length - 1 - p), (mid * mid))" line266="                    : Math.idiv(255 * p * p, (mid * mid));" line267="                const r = (buf[ledoffset + 0] * br2) &gt;&gt; 8; buf[ledoffset + 0] = r;" line268="                const g = (buf[ledoffset + 1] * br2) &gt;&gt; 8; buf[ledoffset + 1] = g;" line269="                const c = (buf[ledoffset + 2] * br2) &gt;&gt; 8; buf[ledoffset + 2] = c;" line270="                if (stride2 == 4) {" line271="                    const w = (buf[ledoffset + 3] * br2) &gt;&gt; 8; buf[ledoffset + 3] = w;" line272="                }" line273="            }" line274="        }" line275="" line276="        /**" line277="         * Create a range of LEDs." line278="         * @param start offset in the LED strip to start the range" line279="         * @param length number of LEDs in the range. eg: 4" line280="         */" line281="        //% weight=89" line282="        //% blockId=&quot;neopixel_range&quot; block=&quot;%strip|range from %start|with %length|leds&quot;" line283="        //% strip.defl=strip" line284="        //% parts=&quot;neopixel&quot;" line285="        //% blockSetVariable=range" line286="        range(start: number, length: number): Strip {" line287="            start = start &gt;&gt; 0;" line288="            length = length &gt;&gt; 0;" line289="            let strip = new Strip();" line290="            strip.buf = this.buf;" line291="            strip.pin = this.pin;" line292="            strip.brightness = this.brightness;" line293="            strip.start = this.start + Math.clamp(0, this._length - 1, start);" line294="            strip._length = Math.clamp(0, this._length - (strip.start - this.start), length);" line295="            strip._matrixWidth = 0;" line296="            strip._mode = this._mode;" line297="            return strip;" line298="        }" line299="" line300="        /**" line301="         * Shift LEDs forward and clear with zeros." line302="         * You need to call ``show`` to make the changes visible." line303="         * @param offset number of pixels to shift forward, eg: 1" line304="         */" line305="        //% blockId=&quot;neopixel_shift&quot; block=&quot;%strip|shift pixels by %offset&quot; blockGap=8" line306="        //% strip.defl=strip" line307="        //% weight=40" line308="        //% parts=&quot;neopixel&quot;" line309="        shift(offset: number = 1): void {" line310="            offset = offset &gt;&gt; 0;" line311="            const stride3 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line312="            this.buf.shift(-offset * stride3, this.start * stride3, this._length * stride3)" line313="        }" line314="" line315="        /**" line316="         * Rotate LEDs forward." line317="         * You need to call ``show`` to make the changes visible." line318="         * @param offset number of pixels to rotate forward, eg: 1" line319="         */" line320="        //% blockId=&quot;neopixel_rotate&quot; block=&quot;%strip|rotate pixels by %offset&quot; blockGap=8" line321="        //% strip.defl=strip" line322="        //% weight=39" line323="        //% parts=&quot;neopixel&quot;" line324="        rotate(offset: number = 1): void {" line325="            offset = offset &gt;&gt; 0;" line326="            const stride4 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line327="            this.buf.rotate(-offset * stride4, this.start * stride4, this._length * stride4)" line328="        }" line329="" line330="        /**" line331="         * Set the pin where the neopixel is connected, defaults to P0." line332="         */" line333="        //% weight=10" line334="        //% parts=&quot;neopixel&quot; advanced=true" line335="        setPin(pin: DigitalPin): void {" line336="            this.pin = pin;" line337="            pins.digitalWritePin(this.pin, 0);" line338="            // don't yield to avoid races on initialization" line339="        }" line340="" line341="        /**" line342="         * Estimates the electrical current (mA) consumed by the current light configuration." line343="         */" line344="        //% weight=9 blockId=neopixel_power block=&quot;%strip|power (mA)&quot;" line345="        //% strip.defl=strip" line346="        //% advanced=true" line347="        power(): number {" line348="            const stride5 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line349="            const end2 = this.start + this._length;" line350="            let q = 0;" line351="            for (let t = this.start; t &lt; end2; ++t) {" line352="                const ledoffset2 = t * stride5;" line353="                for (let u = 0; u &lt; stride5; ++u) {" line354="                    q += this.buf[t + u];" line355="                }" line356="            }" line357="            return Math.idiv(this.length() * 7, 10) /* 0.7mA per neopixel */" line358="                + Math.idiv(q * 480, 10000); /* rought approximation */" line359="        }" line360="" line361="        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {" line362="            if (this._mode === NeoPixelMode.RGB_RGB) {" line363="                this.buf[offset + 0] = red;" line364="                this.buf[offset + 1] = green;" line365="            } else {" line366="                this.buf[offset + 0] = green;" line367="                this.buf[offset + 1] = red;" line368="            }" line369="            this.buf[offset + 2] = blue;" line370="        }" line371="" line372="        private setAllRGB(rgb: number) {" line373="            let red = unpackR(rgb);" line374="            let green = unpackG(rgb);" line375="            let blue = unpackB(rgb);" line376="" line377="            const br3 = this.brightness;" line378="            if (br3 &lt; 255) {" line379="                red = (red * br3) &gt;&gt; 8;" line380="                green = (green * br3) &gt;&gt; 8;" line381="                blue = (blue * br3) &gt;&gt; 8;" line382="            }" line383="            const end3 = this.start + this._length;" line384="            const stride6 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line385="            for (let a = this.start; a &lt; end3; ++a) {" line386="                this.setBufferRGB(a * stride6, red, green, blue)" line387="            }" line388="        }" line389="        private setAllW(white: number) {" line390="            if (this._mode !== NeoPixelMode.RGBW)" line391="                return;" line392="" line393="            let br4 = this.brightness;" line394="            if (br4 &lt; 255) {" line395="                white = (white * br4) &gt;&gt; 8;" line396="            }" line397="            let buf2 = this.buf;" line398="            let end4 = this.start + this._length;" line399="            for (let d = this.start; d &lt; end4; ++d) {" line400="                let ledoffset3 = d * 4;" line401="                buf2[ledoffset3 + 3] = white;" line402="            }" line403="        }" line404="        private setPixelRGB(pixeloffset: number, rgb: number): void {" line405="            if (pixeloffset &lt; 0" line406="                || pixeloffset &gt;= this._length)" line407="                return;" line408="" line409="            let stride7 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line410="            pixeloffset = (pixeloffset + this.start) * stride7;" line411="" line412="            let red2 = unpackR(rgb);" line413="            let green2 = unpackG(rgb);" line414="            let blue2 = unpackB(rgb);" line415="" line416="            let br5 = this.brightness;" line417="            if (br5 &lt; 255) {" line418="                red2 = (red2 * br5) &gt;&gt; 8;" line419="                green2 = (green2 * br5) &gt;&gt; 8;" line420="                blue2 = (blue2 * br5) &gt;&gt; 8;" line421="            }" line422="            this.setBufferRGB(pixeloffset, red2, green2, blue2)" line423="        }" line424="        private setPixelW(pixeloffset: number, white: number): void {" line425="            if (this._mode !== NeoPixelMode.RGBW)" line426="                return;" line427="" line428="            if (pixeloffset &lt; 0" line429="                || pixeloffset &gt;= this._length)" line430="                return;" line431="" line432="            pixeloffset = (pixeloffset + this.start) * 4;" line433="" line434="            let br6 = this.brightness;" line435="            if (br6 &lt; 255) {" line436="                white = (white * br6) &gt;&gt; 8;" line437="            }" line438="            let buf3 = this.buf;" line439="            buf3[pixeloffset + 3] = white;" line440="        }" line441="    }" line442="" line443="    /**" line444="     * Create a new NeoPixel driver for `numleds` LEDs." line445="     * @param pin the pin where the neopixel is connected." line446="     * @param numleds number of leds in the strip, eg: 24,30,60,64" line447="     */" line448="    //% blockId=&quot;neopixel_create&quot; block=&quot;NeoPixel at pin2 %pin|with %numleds|leds as %mode&quot;" line449="    //% weight=90 blockGap=8" line450="    //% parts=&quot;neopixel&quot;" line451="    //% trackArgs=0,2" line452="    //% blockSetVariable=strip" line453="    export function create(pin: DigitalPin, numleds: number, mode: NeoPixelMode): Strip {" line454="        let strip2 = new Strip();" line455="        let stride8 = mode === NeoPixelMode.RGBW ? 4 : 3;" line456="        strip2.buf = pins.createBuffer(numleds * stride8);" line457="        strip2.start = 0;" line458="        strip2._length = numleds;" line459="        strip2._mode = mode || NeoPixelMode.RGB;" line460="        strip2._matrixWidth = 0;" line461="        strip2.setBrightness(128)" line462="        strip2.setPin(pin)" line463="        return strip2;" line464="    }" line465="" line466="    /**" line467="     * Converts red, green, blue channels into a RGB color" line468="     * @param red value of the red channel between 0 and 255. eg: 255" line469="     * @param green value of the green channel between 0 and 255. eg: 255" line470="     * @param blue value of the blue channel between 0 and 255. eg: 255" line471="     */" line472="    //% weight=1" line473="    //% blockId=&quot;neopixel_rgb&quot; block=&quot;red %red|green %green|blue %blue&quot;" line474="    //% advanced=true" line475="    export function rgb(red: number, green: number, blue: number): number {" line476="        return packRGB(red, green, blue);" line477="    }" line478="" line479="    /**" line480="     * Gets the RGB value of a known color" line481="    */" line482="    //% weight=2 blockGap=8" line483="    //% blockId=&quot;neopixel_colors&quot; block=&quot;%color&quot;" line484="    //% advanced=true" line485="    export function colors(color: NeoPixelColors): number {" line486="        return color;" line487="    }" line488="" line489="    function packRGB(a: number, b: number, c: number): number {" line490="        return ((a &amp; 0xFF) &lt;&lt; 16) | ((b &amp; 0xFF) &lt;&lt; 8) | (c &amp; 0xFF);" line491="    }" line492="    function unpackR(rgb: number): number {" line493="        let e = (rgb &gt;&gt; 16) &amp; 0xFF;" line494="        return e;" line495="    }" line496="    function unpackG(rgb: number): number {" line497="        let f = (rgb &gt;&gt; 8) &amp; 0xFF;" line498="        return f;" line499="    }" line500="    function unpackB(rgb: number): number {" line501="        let b2 = (rgb) &amp; 0xFF;" line502="        return b2;" line503="    }" line504="" line505="    /**" line506="     * Converts a hue saturation luminosity value into a RGB color" line507="     * @param h hue from 0 to 360" line508="     * @param s saturation from 0 to 99" line509="     * @param l luminosity from 0 to 99" line510="     */" line511="    //% blockId=neopixelHSL block=&quot;hue %h|saturation %s|luminosity %l&quot;" line512="    export function hsl(h: number, s: number, l: number): number {" line513="        h = Math.round(h);" line514="        s = Math.round(s);" line515="        l = Math.round(l);" line516="" line517="        h = h % 360;" line518="        s = Math.clamp(0, 99, s);" line519="        l = Math.clamp(0, 99, l);" line520="        let c2 = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) &lt;&lt; 8), 10000); //chroma, [0,255]" line521="        let h12 = Math.idiv(h, 60);//[0,6]" line522="        let h22 = Math.idiv((h - h12 * 60) * 256, 60);//[0,255]" line523="        let temp = Math.abs((((h12 % 2) &lt;&lt; 8) + h22) - 256);" line524="        let x = (c2 * (256 - (temp))) &gt;&gt; 8;//[0,255], second largest component of this color" line525="        let r$: number;" line526="        let g$: number;" line527="        let b$: number;" line528="        if (h12 == 0) {" line529="            r$ = c2; g$ = x; b$ = 0;" line530="        } else if (h12 == 1) {" line531="            r$ = x; g$ = c2; b$ = 0;" line532="        } else if (h12 == 2) {" line533="            r$ = 0; g$ = c2; b$ = x;" line534="        } else if (h12 == 3) {" line535="            r$ = 0; g$ = x; b$ = c2;" line536="        } else if (h12 == 4) {" line537="            r$ = x; g$ = 0; b$ = c2;" line538="        } else if (h12 == 5) {" line539="            r$ = c2; g$ = 0; b$ = x;" line540="        }" line541="        let m2 = Math.idiv((Math.idiv((l * 2 &lt;&lt; 8), 100) - c2), 2);" line542="        let r2 = r$ + m2;" line543="        let g2 = g$ + m2;" line544="        let b3 = b$ + m2;" line545="        return packRGB(r2, g2, b3);" line546="    }" line547="" line548="    export enum HueInterpolationDirection {" line549="        Clockwise," line550="        CounterClockwise," line551="        Shortest" line552="    }" line553="}" numlines="554"></mutation></block></next></block></next></block></statement></block></xml>